<?php

/**
 * @file
 * Custom behavior for Barnard Digital Collections.
 */


/**
 * Implements hook_init().
 *
 * Disable caching for the front page only.
 */
function bc_islandora_init() {
  if (drupal_is_front_page()) {
    drupal_page_is_cacheable(FALSE);
  }
}

/**
 * Implements hook_permission().
 */
function bc_islandora_permission() {
  return array(
    'administer bc_islandora' => array(
      'title' => t('Administer Barnard Islandora'),
      'description' => t('Perform administrative tasks for Barnard Islandora.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bc_islandora_menu() {
  $items = array();
  $items['admin/islandora/bc_config'] = array(
    'title' => 'Configure Barnard Islandora',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bc_islandora_config'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer bc_islandora'),
  );
  $items['islandora/object/%islandora_object/download_transcript'] = array(
    'page callback' => 'bc_islandora_download_transcript',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_object_access',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function bc_islandora_theme($existing, $type, $theme, $path) {
  return array(
    'bc_islandora_newspaper_issue_navigator' => array(
      'variables' => array(
        'object' => NULL,
        'start_page' => 1,
      ),
      'file' => 'includes/theme.inc',
    ),
    'bc_islandora_newspaper_page_controls' => array(
      'variables' => array(
        'object' => NULL,
      ),
      'file' => 'includes/theme.inc',
    ),
    'bc_islandora_breadcrumb' => array(
      'variables' => array(
        'breadcrumb' => array(),
      ),
      'file' => 'includes/theme.inc',
    ),
    'bc_islandora_exhibition' => array(
      'variables' => array(
        'node' => array(),
      ),
      'file' => 'includes/theme.inc',
    ),
  );
}

/**
 * Implements hook_form().
 */
function bc_islandora_config($form, &$form_state) {
  // TODO others to add?
  $form['bc_islandora_newspaper_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Newspaper collection pid'),
    '#default_value' => variable_get('bc_islandora_newspaper_pid', ''),
  );
  $form['bc_islandora_pubs_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Student Publications collection pid'),
    '#default_value' => variable_get('bc_islandora_pubs_pid', 'islandora:1022'),
  );
  $form['bc_islandora_manuscripts_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Manuscripts collection pid'),
    '#default_value' => variable_get('bc_islandora_manuscripts_pid', 'islandora:manuscriptCollection'),
  );
  $form['bc_solr_date_facet_format'] = array(
    '#type' => 'textfield',
    '#title' => t('PHP date format that Solr should use for the date facet.'),
    '#default_value' => variable_get('bc_solr_date_facet_format', 'Y/m/d'),
    '#description' => t('<strong>Only accepts: day, month, and year format characters of d/j m/n Y/y.</strong> <br /><a target=_new href="http://php.net/manual/en/function.date.php#refsect1-function.date-parameters">PHP Date Format documentation.</a> <br />Format preview: @format', array('@format' => date(variable_get('bc_solr_date_facet_format', 'Y/m/d')))),
  );
  $form['bc_islandora_hide_datepicker'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide date picker?'),
    '#default_value' => variable_get('bc_islandora_hide_datepicker', TRUE),
    '#description' => t('Whether to hide the date picker when faceting search results by date range.'),
  );
  return system_settings_form($form);
}

function bc_islandora_download_transcript($islandora_pid) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  if ($object = islandora_object_load($islandora_pid)) {
    $object_ocr = '';
    if ($pages = islandora_paged_content_get_pages($object)) {
      foreach ($pages as $page_pid => $page) {
        $page_object = islandora_object_load($page_pid);
        if (isset($page_object['OCR'])) {
          //$object_ocr[] = $page_object['OCR']->content;
          $object_ocr .= $page_object['OCR']->getContent(NULL);
        }
      }
      if (!empty($object_ocr)) {
        header('Content-type: text/plain');
        header("Content-Disposition: attachment; filename=\"transcript.txt\"");
        print $object_ocr;
        exit();
      }
    }
  }
  
  return drupal_not_found();
}

/**
 * Implements hook_form_alter().
 */
function bc_islandora_form_islandora_solr_date_filter_form_alter(&$form, &$form_state) {

  // Get rid of datepicker js if we have the correct setting.
  if (variable_get('bc_islandora_hide_datepicker', FALSE)) {
    unset($form['#attached']);
  }

  // Fetch our date facet_format.
  $query_params = drupal_get_query_parameters();
  $query_params['date_format'] ? $facet_format = $query_params['date_format'] : $facet_format = variable_get('bc_solr_date_facet_format', 'Y/m/d');

  // Fetch our record start and end dates as DateTime objs.
  // global $_islandora_solr_queryclass;
  // $record_start = new DateTime($_islandora_solr_queryclass->islandoraSolrResult['facet_counts']['facet_dates']['mods_originInfo_dateCreated_mdt']['start']);
  // $record_end = new DateTime($_islandora_solr_queryclass->islandoraSolrResult['facet_counts']['facet_dates']['mods_originInfo_dateCreated_mdt']['end']);

  // Update the format helper text.
  $form['date_filter']['date_filter']['#markup'] = '<div class="description">(Valid formats: YYYY, YYYY/MM, YYYY/MM/DD)</div>';
  // $form['date_filter']['date_filter_submit']['#prefix'] = '<div class="description">Showing records from: '.$record_start->format($facet_format).' to '.$record_end->format($facet_format).'</div>';

  // Remove titles and add placeholder text instead.
  unset($form['date_filter']['date_filter_from']['#title']);
  unset($form['date_filter']['date_filter_to']['#title']);
  $form['date_filter']['date_filter_from']['#attributes']['placeholder'] = 'Start';
  $form['date_filter']['date_filter_from']['#suffix'] = '<span id="between-dates">to </span>';
  $form['date_filter']['date_filter_to']['#attributes']['placeholder'] = 'End';

  // Change "Filter" to "Apply"
  $form['date_filter']['date_filter_submit']['#value'] = 'Apply';

  // Add a handler to modify the date_filter_to to the latest date possible based on current input.
  array_unshift($form['#submit'], 'bc_islandora_form_islandora_solr_date_filter_form_submit');

  // Do not add anything to blank fields. Leave this function.
  if (!$form['date_filter']['date_filter_from']['#default_value'] && !$form['date_filter']['date_filter_to']['#default_value']) {
    return;
  }

  // Modify the current form to use our facet_format. 
  $date_from = new DateTime($form['date_filter']['date_filter_from']['#default_value']);
  $date_to = new DateTime($form['date_filter']['date_filter_to']['#default_value']);
  $form['date_filter']['date_filter_from']['#default_value'] = $date_from->format($facet_format);
  $form['date_filter']['date_filter_to']['#default_value'] = $date_to->format($facet_format);
}

/*
 * When using a facet_format, this simply appends the "oldest date" as the date_filter_to.
 */ 
function bc_islandora_form_islandora_solr_date_filter_form_submit(&$form, &$form_state) {
  global $_islandora_solr_queryclass;

  $form_date_from = $form_state['values']['date_filter']['date_filter_from'];
  $form_date_to = $form_state['values']['date_filter']['date_filter_to'];

  $_islandora_solr_queryclass->internalSolrParams['date_format'] = bc_islandora_get_date_format($form_date_from, $form_date_to);
  $form_state['values']['date_filter']['date_filter_to'] .= bc_islandora_get_latest_possible_date($form_date_to);
}

// TODO: describe function
function bc_islandora_get_date_format($date1, $date2) {
  $date_a = count(explode('/', $date1));
  $date_b = count(explode('/', $date2));
  switch (max($date_a, $date_b)) {
    case 1: return 'Y';
    case 2: return 'Y/m';
    case 3: return 'Y/m/d';
  }
}

// TODO: describe function
function bc_islandora_get_latest_possible_date($date_to) {
  $date_count = count(explode('/', $date_to));
  switch ($date_count) {
    case 1: // We always end a year in December, which has 31days, at least for the foreseeable future.
      return '/12/31'; 
    case 2: // All this code just figures out what the last day of the month is, and returns it. Convoluted much??
      $dto = new DateTime($date_to.'/1');
      $dto->add(new DateInterval('P1M'))->sub(new DateInterval('P1D'));
      return '/'.$dto->format('d');
    case 3: 
      return;
  }
}
