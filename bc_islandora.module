<?php

/**
 * @file
 * Custom behavior for Barnard Digital Collections.
 */


/**
 * Implements hook_init().
 *
 * Disable caching for the front page only.
 */
function bc_islandora_init() {
  if (drupal_is_front_page()) {
    drupal_page_is_cacheable(FALSE);
  }
}

/**
 * Implements hook_permission().
 */
function bc_islandora_permission() {
  return array(
    'administer bc_islandora' => array(
      'title' => t('Administer Barnard Islandora'),
      'description' => t('Perform administrative tasks for Barnard Islandora.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bc_islandora_menu() {
  return array(
    'admin/islandora/bc_config' => array(
      'page callback' => 'drupal_get_form',
      'title' => 'Configure Barnard Islandora',
      'type' => MENU_NORMAL_ITEM,
      'page arguments' => array('bc_islandora_config'),
      'access arguments' => array('administer bc_islandora'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function bc_islandora_theme($existing, $type, $theme, $path) {
  return array(
    'bc_islandora_newspaper_issue_navigator' => array(
      'variables' => array(
        'object' => NULL,
        'start_page' => 1,
      ),
      'file' => 'includes/bc_islandora.theme.inc',
    ),
    'bc_islandora_newspaper_page_controls' => array(
      'variables' => array(
        'object' => NULL,
      ),
      'file' => 'includes/bc_islandora.theme.inc',
    ),
    'bc_islandora_breadcrumb' => array(
      'variables' => array(
        'breadcrumb' => array(),
      ),
      'file' => 'includes/bc_islandora.theme.inc',
    ),
    'bc_islandora_exhibition' => array(
      'variables' => array(
        'node' => array(),
      ),
      'file' => 'includes/bc_islandora.theme.inc',
    ),
  );
}

/**
 * Implements hook_form().
 */
function bc_islandora_config($form, &$form_state) {
  // TODO others to add?
  $form['bc_islandora_newspaper_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Newspaper collection pid'),
    '#default_value' => variable_get('bc_islandora_newspaper_pid', ''),
  );
  $form['bc_islandora_pubs_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Student Publications collection pid'),
    '#default_value' => variable_get('bc_islandora_pubs_pid', 'islandora:1022'),
  );
  $form['bc_islandora_manuscripts_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Manuscripts collection pid'),
    '#default_value' => variable_get('bc_islandora_manuscripts_pid', 'islandora:manuscriptCollection'),
  );
  $form['bc_solr_date_facet_format'] = array(
    '#type' => 'textfield',
    '#title' => t('PHP date format that Solr should use for the date facet.'),
    '#default_value' => variable_get('bc_solr_date_facet_format', 'Y/m/d'),
    '#description' => t('<strong>Only accepts: day, month, and year format characters of d/j m/n Y/y.</strong> <br /><a target=_new href="http://php.net/manual/en/function.date.php#refsect1-function.date-parameters">PHP Date Format documentation.</a> <br />Format preview: @format', array('@format' => date(variable_get('bc_solr_date_facet_format', 'Y/m/d')))),
  );
  $form['bc_islandora_hide_datepicker'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide date picker?'),
    '#default_value' => variable_get('bc_islandora_hide_datepicker', TRUE),
    '#description' => t('Whether to hide the date picker when faceting search results by date range.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function bc_islandora_block_info() {
  $blocks = array(
    'bc_islandora_newspaper' => array(
      'info' => t('Newspaper Collection'),
      'status' => BLOCK_VISIBILITY_LISTED,
      'pages' => array('bulletin'),
      'region' => 'content',
    ),
    'bc_islandora_yearbook' => array(
      'info' => t('Book Collection'),
      'status' => BLOCK_VISIBILITY_LISTED,
      'pages' => array('yearbook'),
      'region' => 'content',
    ),
    'bc_islandora_student_pubs' => array(
      'info' => t('Student Publications'),
      'status' => BLOCK_VISIBILITY_LISTED,
      'pages' => array('student-publications'),
      'region' => 'content',
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_save().
 */
function bc_islandora_block_save($delta = '') {
  if (preg_match('/^bc_islandora_/', $delta) !== FALSE) {
    $variable = $delta . '_pid';
    variable_set($variable, $edit['islandora_collection_pid']);
  }
}

/**
 * Implements hook_block_view().
 */
function bc_islandora_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Newspaper landing page block.
    // TODO could use renderable arrays instead of literal HTML...
    case 'bc_islandora_newspaper':
      $collection_pid = variable_get($delta . '_pid', 'islandora:1');
      module_load_include('inc', 'islandora_newspaper', 'includes/utilities');
      $decades_output = '<div class="decades"><ul id="decades">';
      $years_output = '<div class="years">';
      $months_output = '<div class="months">';
      $issues_output = '<div class="issues">';
      $months_sort = array();
      $issues_sort = array();
      $grouped_issues = array();

      $paper = islandora_object_load($collection_pid);
      $issues = $paper ? islandora_newspaper_get_issues($paper) : array();
      $grouped_issues = _bc_islandora_newspaper_group_issues($issues);
      ksort($grouped_issues);
      foreach ($grouped_issues as $decade => $years) {
        $decades_output .= '<li class="decade"><a href="#">' . $decade . '</a></li>';

        ksort($years);
        foreach ($years as $year => $months) {
          // Set $decade_start and open the ul tag if this is the first
          // iteration.
          if (!isset($decade_start)) {
            $decade_start = preg_replace('/s$/', '', $decade);
            $years_output .= '<ul class="decade" id="' . $decade . '">';
          }
          // We've reached the end of the decade if $year is divisible by 10
          // or the difference between $year and $decade_start is 10 or more.
          elseif (!($year % 10) || ($year - $decade_start >= 10)) {
            $years_output .= '</ul>';
            // Reset $decade_start for the next decade.
            $decade_start = ($year - ($year % 10));
            $years_output .= '<ul class="decade" id=' . $decade_start . 's' . '>';
          }
          $years_output .= '<li class="year" id="' . $year . '"><a href="#">' . $year . '</a></li>';

          // Populate the $months_sort and $issues_sort arrays for use below.
          foreach ($months as $month => $issues) {
            $month_display = date('F', strtotime($year . '-' . $month));
            $months_sort[$year][$month] = '<li class="month" id="' . $month . '"><a href="#">' . $month_display . '</a></li>';
            foreach ($issues as $day => $issue) {
              $issue_url = "islandora/object/{$issue[0]['pid']}";
              $issues_sort[$year][$month][$day] = '<li class="issue">' . l(preg_replace('/^0/', '', $day), $issue_url) . '</li>';
            }
          }
        }
      }
      $decades_output .= '</ul></div>';
      $years_output .= '</div>';
      // Generate month and issue output.
      foreach ($months_sort as $year => $month) {
        ksort($month);
        $months_output .= '<ul class="months-' . $year . '">';
        $months_output .= implode("\n", $month);
        $months_output .= '</ul>';
        foreach ($issues_sort[$year] as $issue_month => $day) {
          ksort($day);
          $issues_output .= '<ul class="issues-' . $year . '-' . $issue_month . '">';
          $issues_output .= implode("\n", $day);
          $issues_output .= '</ul>';
        }
      }

      $months_output .= '</div>';
      $issues_output .= '</div>';

      $output = '<div class="bulletin-nav">
          <span class="browse"><b>Browse issues by date:</b>&nbsp;</span><span class="decade"><a id="nav" href="#"></a></span><span class="month"></span><span class="day"></span><span class="year"><a id="nav" href="#"></a></span>
        </div>';
      $output .= '<div class="bulletin-calendar inactive">' . $decades_output . $years_output . $months_output . $issues_output . '</div>';
      $block['content'] = $output;
      break;

    // Yearbook landing page block.
    case 'bc_islandora_yearbook':
      $collection_pid = variable_get($delta . '_pid', 'islandora:bookCollection');
      // Only generate the block output if we can load the book collection.
      if ($book_collection = islandora_object_load($collection_pid)) {
        $years = array();
        $decade_output = '<div class="decades"><ul id="decades">';
        $years_output = '<div class="years">';
        // SPARQL query for isMemberOf book collection and hasModel bookCModel.
        $query = <<<EOQ
PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
PREFIX fedora-rels-ext: <info:fedora/fedora-system:def/relations-external#>
SELECT ?object
FROM <#ri>
WHERE {
  ?object fedora-rels-ext:isMemberOf <info:fedora/{$collection_pid}> ;
       <fedora-model:hasModel> <info:fedora/islandora:bookCModel> ;
}
EOQ;
        $results = $book_collection->repository->ri->sparqlQuery($query);
        // Cycle through SPARQL query results and generate a structured list of
        // yearbook years (structured as $years[decade][year][i]).
        foreach ($results as $r) {
          $pid = $r['object']['value'];
          $pid_parts = explode('-', $pid);
          // See if we got a volume number separated in the pid from the year
          // by a period and set $vol if found.
          if (strpos($pid_parts[1], '.') !== FALSE) {
            $year_parts = explode('.', $pid_parts[1]);
            $year = $year_parts[0];
            $vol = $year_parts[1];
          }
          else {
            $year = $pid_parts[1];
          }
          $decade = $year - ($year % 10) . 's';
          $yb_link = l($year, "islandora/object/{$pid}");
          // If we got a volume number, make sure the link is at the end of the
          // $years[decade][year] array...
          // (N.B. this doesn't work for >2 volumes, BUT that's ok I guess?)
          if (isset($vol)) {
            $years[$decade][$year][1] = $yb_link . '&nbsp(' . $vol . ')';
            unset($vol);
          }
          else {
            $years[$decade][$year][0] = $yb_link;
          }
        }
        ksort($years);
        // Cycle through the $years array generated above.
        foreach ($years as $decade => $y) {
          ksort($y);
          $decade_output .= '<li class="decade"><a href="#">' . $decade . '</a></li>';
          // Cycle through the year subarray. Generate decade/year list output.
          foreach ($y as $year => $l) {
            $years_markup = function($link) {
              return '<li class="year">' . $link . '</li>';
            };
            $year_output = array_map($years_markup, $l);

            // Is this the first year of the decade? If so, generate opening
            // <ul> tag.
            if (!isset($decade_start)) {
              $decade_start = $decade;
              $years_output .= '<ul class="decade" id="' . $decade_start . '">';
            }
            // Is this the last year of the decade? If so, close the list and
            // start a new one.
            elseif (!($year % 10) || ($year - $decade_start >= 10)) {
              $years_output .= '</ul>';
              $decade_start = $decade;
              $years_output .= '<ul class="decade" id="' . $decade_start . '">';
            }
            foreach ($year_output as $yo) {
              $years_output .= $yo;
            }
          }
          // If this is the last decade in the list, close the list.
          if ($decade == end(array_keys($years))) {
            $decade_output .= '</ul>';
          }
        }
        $decade_output .= '</div>';
        $output = '<div class="yearbook-nav">
            <span class="browse"><b>Find a yearbook by date:</b>&nbsp;</span><span class="decade"><a id="nav" href="#"></a></span><span class="year"><a id="nav" href="#"></a></span>
          </div>';
        $output .= '<div class="yearbook-calendar">' . $decade_output . $years_output . '</div>';
        $block['content'] = $output;
      }
      break;

    // Student publications landing page just uses standard islandora view.
    case 'bc_islandora_student_pubs':
      $collection_pid = variable_get('bc_islandora_pubs_pid', 'islandora:1022');
      $pubs_collection = islandora_object_load($collection_pid);
      $block['content'] = islandora_view_object($pubs_collection);
      break;
  }
  return $block;
}

/**
 * Helper function to group newspaper issues by decade and year.
 *
 * Called above by bc_islandora_block_view(), newspaper case.
 */
function _bc_islandora_newspaper_group_issues($issues) {
  $years = islandora_newspaper_group_issues($issues);
  $decades = array();
  foreach ($years as $year => $data) {
    $decade = ($year - ($year % 10)) . 's';
    $decades[$decade][$year] = $data;
  }
  return $decades;
}

/**
 * Implements hook_form_alter().
 */
function bc_islandora_form_islandora_solr_date_filter_form_alter(&$form, &$form_state) {
  global $_islandora_solr_queryclass;

  // Get rid of datepicker js if we have the correct setting.
  if (variable_get('bc_islandora_hide_datepicker', FALSE)) {
    unset($form['#attached']);    
  }

  // Fetch our date facet_format.
  $query_params = drupal_get_query_parameters();
  $query_params['date_format'] ? $facet_format = $query_params['date_format'] : $facet_format = variable_get('bc_solr_date_facet_format', 'Y/m/d');

  // Fetch our record start and end dates as DateTime objs.
  $record_start = new DateTime($_islandora_solr_queryclass->islandoraSolrResult['facet_counts']['facet_dates']['mods_originInfo_dateCreated_mdt']['start']);
  $record_end = new DateTime($_islandora_solr_queryclass->islandoraSolrResult['facet_counts']['facet_dates']['mods_originInfo_dateCreated_mdt']['end']);

  // Update the format helper text.
  $form['date_filter']['date_filter']['#markup'] = '<div class="description">(Valid formats: YYYY, YYYY/MM, YYYY/MM/DD)</div>';
  $form['date_filter']['date_filter_submit']['#prefix'] = '<div class="description">Showing records from: '.$record_start->format($facet_format).' to '.$record_end->format($facet_format).'</div>';

  // Add a handler to modify the date_filter_to to the latest date possible based on current input.
  array_unshift($form['#submit'], 'bc_islandora_form_islandora_solr_date_filter_form_submit');

  // Do not add anything to blank fields. Leave this function.
  if (!$form['date_filter']['date_filter_from']['#default_value'] && !$form['date_filter']['date_filter_to']['#default_value']) {
    return;
  }

  // Modify the current form to use our facet_format. 
  $date_from = new DateTime($form['date_filter']['date_filter_from']['#default_value']);
  $date_to = new DateTime($form['date_filter']['date_filter_to']['#default_value']);
  $form['date_filter']['date_filter_from']['#default_value'] = $date_from->format($facet_format);
  $form['date_filter']['date_filter_to']['#default_value'] = $date_to->format($facet_format);
}

/*
 * When using a facet_format, this simply appends the "oldest date" as the date_filter_to.
 * THIS IS A WIP.
 */ 
function bc_islandora_form_islandora_solr_date_filter_form_submit(&$form, &$form_state) {
  global $_islandora_solr_queryclass;
  $date_to = explode('/', $form_state['values']['date_filter']['date_filter_to']);
  switch (count($date_to)) {
    case 1:
      $form_state['values']['date_filter']['date_filter_to'] .= "/12/31";
      $_islandora_solr_queryclass->internalSolrParams['date_format'] = 'Y';
      break;
    case 2:
      $form_state['values']['date_filter']['date_filter_to'] .= "/31";
      $_islandora_solr_queryclass->internalSolrParams['date_format'] = 'Y/m';
      break;
    case 3:
      $_islandora_solr_queryclass->internalSolrParams['date_format'] = 'Y/m/d';
      break;
  }
}